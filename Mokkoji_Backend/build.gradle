plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id "jacoco"
	id 'checkstyle'
	id "org.sonarqube" version "3.5.0.2730"
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
	snippetsDir = file('build/generated-snippets')
}

bootJar {
	dependsOn asciidoctor // (1)
	copy { // (2)
		from "${asciidoctor.outputDir}"
		into 'src/main/resources/static/docs'
	}
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.rest-assured:rest-assured'

	implementation 'org.springframework.boot:spring-boot-starter-actuator' // actuator
	implementation 'io.micrometer:micrometer-registry-prometheus' // prometheus

	// jwt 설정
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Spring Rest Doc 설정
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.5.RELEASE'
	testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:2.0.5.RELEASE'
	testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"

	// queryDSL 설정
	implementation "com.querydsl:querydsl-jpa"
	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}
// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}

sonar {
	properties {
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.organization', 'jiwonchoisonarcloud-1'
		property 'sonar.projectKey', 'jjiwoning_Mokkoji'
		property 'sonar.java.checkstyle.reportPaths', 'build/reports/checkstyle/main.xml'
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
	}
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}

checkstyle {
	maxWarnings = 0
	configProperties = [
			'suppressionFile': file('config/checkstyle/suppressions.xml').absolutePath
	]
	toolVersion = "10.4"
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			enabled = true

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.30
			}
			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.30
			}
		}
	}
}
